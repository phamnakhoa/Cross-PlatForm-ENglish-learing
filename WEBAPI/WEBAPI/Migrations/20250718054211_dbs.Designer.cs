// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WEBAPI.Models;

#nullable disable

namespace WEBAPI.Migrations
{
    [DbContext(typeof(LuanvantienganhContext))]
    [Migration("20250718054211_dbs")]
    partial class dbs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WEBAPI.Models.AcademicResult", b =>
                {
                    b.Property<int>("AcademicResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicResultId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("LessonID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TimeSpent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AcademicResultId")
                        .HasName("PK__Academic__D5B70E7EDCA5BC99");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Academic_Result", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.Banner", b =>
                {
                    b.Property<int>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BannerId"));

                    b.Property<string>("BannerDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BannerImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BannerSubtitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BannerTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LinkUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("BannerId")
                        .HasName("PK__Banner__32E86AD1856F050A");

                    b.ToTable("Banner", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__19093A2B83CE4368");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CertificateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateOnly>("IssueDate")
                        .HasColumnType("date");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CertificateId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "VerificationCode" }, "UQ_Certificates_VerificationCode")
                        .IsUnique();

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("WEBAPI.Models.ContentType", b =>
                {
                    b.Property<int>("ContentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContentTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentTypeId"));

                    b.Property<string>("TypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentTypeId");

                    b.ToTable("ContentType", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.Conversation", b =>
                {
                    b.Property<int>("ConversationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationID"));

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ConversationID");

                    b.HasIndex("UserID");

                    b.HasIndex("AdminID", "UserID")
                        .IsUnique();

                    b.ToTable("Conversation", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DurationInMonths")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("img");

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    b.HasKey("CourseId")
                        .HasName("PK__Course__C92D71872CDF6125");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LevelId");

                    b.HasIndex("PackageId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.CourseLesson", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("LessonID");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "LessonId");

                    b.HasIndex("LessonId");

                    b.HasIndex(new[] { "CourseId", "OrderNo" }, "UQ_CourseLesson_Course_OrderNo")
                        .IsUnique();

                    b.ToTable("CourseLesson", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LessonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<DateOnly>("Duration")
                        .HasColumnType("date");

                    b.Property<int>("DurationMinute")
                        .HasColumnType("int");

                    b.Property<bool>("IsActivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LessonContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LessonTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LessonId")
                        .HasName("PK__Lesson__B084ACB04C392F71");

                    b.ToTable("Lesson", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.LessonQuestion", b =>
                {
                    b.Property<int>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("LessonID");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.HasKey("LessonId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex(new[] { "LessonId", "OrderNo" }, "UQ_Lesson_Order")
                        .IsUnique();

                    b.ToTable("LessonQuestion", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LevelId")
                        .HasName("PK__Level__09F03C06643F612B");

                    b.ToTable("Level", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("MessageID");

                    b.HasIndex("ConversationID");

                    b.HasIndex("SenderID");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BCFF16FFEB6");

                    b.HasIndex("PackageId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WEBAPI.Models.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<int?>("DurationDay")
                        .HasColumnType("int");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("urlImage");

                    b.HasKey("PackageId")
                        .HasName("PK__Package__322035EC4E16E07A");

                    b.ToTable("Package", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.PackageInclusion", b =>
                {
                    b.Property<int>("ParentPackageId")
                        .HasColumnType("int")
                        .HasColumnName("ParentPackageID");

                    b.Property<int>("IncludedPackageId")
                        .HasColumnType("int")
                        .HasColumnName("IncludedPackageID");

                    b.Property<DateTime?>("DateAdd")
                        .HasColumnType("datetime");

                    b.HasKey("ParentPackageId", "IncludedPackageId");

                    b.HasIndex("IncludedPackageId");

                    b.ToTable("PackageInclusion", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<string>("Logo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentMethodId")
                        .HasName("PK__PaymentM__DC31C1D32CC7DAB2");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("WEBAPI.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("AnswerOptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AudioUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ContentTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ContentTypeID");

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("QuestionLevelId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionLevelID");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionTypeId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__0DC06F8CC0A35A91");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("QuestionLevelId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.QuestionLevel", b =>
                {
                    b.Property<int>("QuestionLevelId")
                        .HasColumnType("int")
                        .HasColumnName("QuestionLevelID");

                    b.Property<string>("QuestionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("QuestionLevelId")
                        .HasName("PK__Question__4DCE689F3DD12B96");

                    b.ToTable("QuestionLevel", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.QuestionType", b =>
                {
                    b.Property<int>("QuestionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionTypeId"));

                    b.Property<string>("TypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("QuestionTypeId")
                        .HasName("PK__Question__7EDFF9313CB97AE0");

                    b.ToTable("QuestionType", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("LessonID");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReviewId")
                        .HasName("PK__Review__74BC79AE7E4C6D85");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__ROLE__8AFACE3A263754CA");

                    b.ToTable("ROLE", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestId"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<double?>("Score")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TestId")
                        .HasName("PK__Tests__8CC331601C0B3DA4");

                    b.HasIndex("UserId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("WEBAPI.Models.TestQuestion", b =>
                {
                    b.Property<int>("TestQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestQuestionId"));

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("TestQuestionId")
                        .HasName("PK__TestQues__4C589E09C41704DF");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("WEBAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DateofBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Fullname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime")
                        .HasColumnName("lastLoginDate");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.HasKey("UserId")
                        .HasName("PK___USER__1788CCAC82B0D5D2");

                    b.HasIndex("RoleId");

                    b.ToTable("_USER", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.UserAnswer", b =>
                {
                    b.Property<int>("UserAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAnswerId"));

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("SelectedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserAnswerId")
                        .HasName("PK__UserAnsw__47CE237F19CFB3D2");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("WEBAPI.Models.UserPackageRegistration", b =>
                {
                    b.Property<int>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PackageId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPackageRegistration", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.Vocabulary", b =>
                {
                    b.Property<int>("VocabularyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VocabularyId"));

                    b.Property<string>("AudioUrlUk")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("AudioUrlUK");

                    b.Property<string>("AudioUrlUs")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("AudioUrlUS");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Pronunciation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VocabularyId")
                        .HasName("PK__Vocabula__927406BFDB159057");

                    b.ToTable("Vocabularies");
                });

            modelBuilder.Entity("WEBAPI.Models.VocabularyCategory", b =>
                {
                    b.Property<int>("VocabularyCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VocabularyCategoryId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UrlImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("urlImage");

                    b.Property<string>("VocabularyCategoryDescription")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VocabularyCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VocabularyCategoryId")
                        .HasName("PK__Vocabula__22F98D85DE0C00E7");

                    b.ToTable("VocabularyCategories");
                });

            modelBuilder.Entity("WEBAPI.Models.VocabularyCategoryMapping", b =>
                {
                    b.Property<int>("VocabularyId")
                        .HasColumnType("int")
                        .HasColumnName("VocabularyID");

                    b.Property<int>("VocabularyCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("VocabularyCategoryID");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.HasKey("VocabularyId", "VocabularyCategoryId");

                    b.HasIndex("VocabularyCategoryId");

                    b.ToTable("VocabularyCategoryMapping", (string)null);
                });

            modelBuilder.Entity("WEBAPI.Models.VocabularyMeaning", b =>
                {
                    b.Property<int>("VocabularyMeaningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VocabularyMeaningId"));

                    b.Property<string>("Antonyms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExampleSentence")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PartOfSpeech")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Synonyms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranslatedExampleSentence")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TranslatedMeaning")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("VocabularyId")
                        .HasColumnType("int");

                    b.HasKey("VocabularyMeaningId")
                        .HasName("PK__Vocabula__01FBC49325399152");

                    b.HasIndex("VocabularyId");

                    b.ToTable("VocabularyMeanings");
                });

            modelBuilder.Entity("WEBAPI.Models.AcademicResult", b =>
                {
                    b.HasOne("WEBAPI.Models.Course", "Course")
                        .WithMany("AcademicResults")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_AcademicResult_Course");

                    b.HasOne("WEBAPI.Models.Lesson", "Lesson")
                        .WithMany("AcademicResults")
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK_AcademicResult_Lesson");

                    b.HasOne("WEBAPI.Models.User", "User")
                        .WithMany("AcademicResults")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_AcademicResult_User");

                    b.Navigation("Course");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEBAPI.Models.Certificate", b =>
                {
                    b.HasOne("WEBAPI.Models.Course", "Course")
                        .WithMany("Certificates")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Certificates_Course");

                    b.HasOne("WEBAPI.Models.User", "User")
                        .WithMany("Certificates")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Certificates_User");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEBAPI.Models.Conversation", b =>
                {
                    b.HasOne("WEBAPI.Models.User", "Admin")
                        .WithMany("AdminConversations")
                        .HasForeignKey("AdminID")
                        .IsRequired()
                        .HasConstraintName("FK_Conversation_Admin");

                    b.HasOne("WEBAPI.Models.User", "User")
                        .WithMany("UserConversations")
                        .HasForeignKey("UserID")
                        .IsRequired()
                        .HasConstraintName("FK_Conversation_User");

                    b.Navigation("Admin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEBAPI.Models.Course", b =>
                {
                    b.HasOne("WEBAPI.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Course_Category");

                    b.HasOne("WEBAPI.Models.Level", "Level")
                        .WithMany("Courses")
                        .HasForeignKey("LevelId")
                        .IsRequired()
                        .HasConstraintName("FK_Course_Level");

                    b.HasOne("WEBAPI.Models.Package", "Package")
                        .WithMany("Courses")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("FK_Course_Package");

                    b.Navigation("Category");

                    b.Navigation("Level");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("WEBAPI.Models.CourseLesson", b =>
                {
                    b.HasOne("WEBAPI.Models.Course", "Course")
                        .WithMany("CourseLessons")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseLesson_Course");

                    b.HasOne("WEBAPI.Models.Lesson", "Lesson")
                        .WithMany("CourseLessons")
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseLesson_Lesson");

                    b.Navigation("Course");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("WEBAPI.Models.LessonQuestion", b =>
                {
                    b.HasOne("WEBAPI.Models.Lesson", "Lesson")
                        .WithMany("LessonQuestions")
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonQuestion_Lesson");

                    b.HasOne("WEBAPI.Models.Question", "Question")
                        .WithMany("LessonQuestions")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonQuestion_Question");

                    b.Navigation("Lesson");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WEBAPI.Models.Message", b =>
                {
                    b.HasOne("WEBAPI.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationID")
                        .IsRequired()
                        .HasConstraintName("FK_Message_Conversation");

                    b.HasOne("WEBAPI.Models.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderID")
                        .IsRequired()
                        .HasConstraintName("FK_Message_Sender");

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("WEBAPI.Models.Order", b =>
                {
                    b.HasOne("WEBAPI.Models.Package", "Package")
                        .WithMany("Orders")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Packages");

                    b.HasOne("WEBAPI.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_PaymentMethods");

                    b.HasOne("WEBAPI.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Orders_Users");

                    b.Navigation("Package");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEBAPI.Models.PackageInclusion", b =>
                {
                    b.HasOne("WEBAPI.Models.Package", "IncludedPackage")
                        .WithMany("PackageInclusionIncludedPackages")
                        .HasForeignKey("IncludedPackageId")
                        .IsRequired()
                        .HasConstraintName("FK_PackageInclusion_IncludedPackage");

                    b.HasOne("WEBAPI.Models.Package", "ParentPackage")
                        .WithMany("PackageInclusionParentPackages")
                        .HasForeignKey("ParentPackageId")
                        .IsRequired()
                        .HasConstraintName("FK_PackageInclusion_ParentPackage");

                    b.Navigation("IncludedPackage");

                    b.Navigation("ParentPackage");
                });

            modelBuilder.Entity("WEBAPI.Models.Question", b =>
                {
                    b.HasOne("WEBAPI.Models.ContentType", "ContentType")
                        .WithMany("Questions")
                        .HasForeignKey("ContentTypeId")
                        .HasConstraintName("FK_Question_ContentType");

                    b.HasOne("WEBAPI.Models.QuestionLevel", "QuestionLevel")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLevelId")
                        .HasConstraintName("FK_Question_QuestionLevel");

                    b.HasOne("WEBAPI.Models.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .HasConstraintName("FK_Question_QuestionType");

                    b.Navigation("ContentType");

                    b.Navigation("QuestionLevel");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("WEBAPI.Models.Review", b =>
                {
                    b.HasOne("WEBAPI.Models.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Review_Course");

                    b.HasOne("WEBAPI.Models.Lesson", "Lesson")
                        .WithMany("Reviews")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("FK_Review_Lesson");

                    b.HasOne("WEBAPI.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Review_User");

                    b.Navigation("Course");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEBAPI.Models.Test", b =>
                {
                    b.HasOne("WEBAPI.Models.User", "User")
                        .WithMany("Tests")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Tests__UserId__3CBF0154");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEBAPI.Models.TestQuestion", b =>
                {
                    b.HasOne("WEBAPI.Models.Question", "Question")
                        .WithMany("TestQuestions")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK__TestQuest__Quest__408F9238");

                    b.HasOne("WEBAPI.Models.Test", "Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK__TestQuest__TestI__3F9B6DFF");

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("WEBAPI.Models.User", b =>
                {
                    b.HasOne("WEBAPI.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK___USER__RoleID__398D8EEE");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WEBAPI.Models.UserAnswer", b =>
                {
                    b.HasOne("WEBAPI.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK__UserAnswe__Quest__4460231C");

                    b.HasOne("WEBAPI.Models.Test", "Test")
                        .WithMany("UserAnswers")
                        .HasForeignKey("TestId")
                        .IsRequired()
                        .HasConstraintName("FK__UserAnswe__TestI__436BFEE3");

                    b.HasOne("WEBAPI.Models.User", "User")
                        .WithMany("UserAnswers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserAnswe__UserI__45544755");

                    b.Navigation("Question");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEBAPI.Models.UserPackageRegistration", b =>
                {
                    b.HasOne("WEBAPI.Models.Package", "Package")
                        .WithMany("UserPackageRegistrations")
                        .HasForeignKey("PackageId")
                        .IsRequired()
                        .HasConstraintName("FK_UPR_Package");

                    b.HasOne("WEBAPI.Models.User", "User")
                        .WithMany("UserPackageRegistrations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UPR_User");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WEBAPI.Models.VocabularyCategoryMapping", b =>
                {
                    b.HasOne("WEBAPI.Models.VocabularyCategory", "VocabularyCategory")
                        .WithMany("VocabularyCategoryMappings")
                        .HasForeignKey("VocabularyCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_VocabularyCategoryMapping_VocabularyCategories");

                    b.HasOne("WEBAPI.Models.Vocabulary", "Vocabulary")
                        .WithMany("VocabularyCategoryMappings")
                        .HasForeignKey("VocabularyId")
                        .IsRequired()
                        .HasConstraintName("FK_VocabularyCategoryMapping_Vocabularies");

                    b.Navigation("Vocabulary");

                    b.Navigation("VocabularyCategory");
                });

            modelBuilder.Entity("WEBAPI.Models.VocabularyMeaning", b =>
                {
                    b.HasOne("WEBAPI.Models.Vocabulary", "Vocabulary")
                        .WithMany("VocabularyMeanings")
                        .HasForeignKey("VocabularyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__VocabMeaning__Vocab__11216507");

                    b.Navigation("Vocabulary");
                });

            modelBuilder.Entity("WEBAPI.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("WEBAPI.Models.ContentType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("WEBAPI.Models.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("WEBAPI.Models.Course", b =>
                {
                    b.Navigation("AcademicResults");

                    b.Navigation("Certificates");

                    b.Navigation("CourseLessons");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WEBAPI.Models.Lesson", b =>
                {
                    b.Navigation("AcademicResults");

                    b.Navigation("CourseLessons");

                    b.Navigation("LessonQuestions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WEBAPI.Models.Level", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("WEBAPI.Models.Package", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Orders");

                    b.Navigation("PackageInclusionIncludedPackages");

                    b.Navigation("PackageInclusionParentPackages");

                    b.Navigation("UserPackageRegistrations");
                });

            modelBuilder.Entity("WEBAPI.Models.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WEBAPI.Models.Question", b =>
                {
                    b.Navigation("LessonQuestions");

                    b.Navigation("TestQuestions");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("WEBAPI.Models.QuestionLevel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("WEBAPI.Models.QuestionType", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("WEBAPI.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WEBAPI.Models.Test", b =>
                {
                    b.Navigation("TestQuestions");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("WEBAPI.Models.User", b =>
                {
                    b.Navigation("AcademicResults");

                    b.Navigation("AdminConversations");

                    b.Navigation("Certificates");

                    b.Navigation("Messages");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("Tests");

                    b.Navigation("UserAnswers");

                    b.Navigation("UserConversations");

                    b.Navigation("UserPackageRegistrations");
                });

            modelBuilder.Entity("WEBAPI.Models.Vocabulary", b =>
                {
                    b.Navigation("VocabularyCategoryMappings");

                    b.Navigation("VocabularyMeanings");
                });

            modelBuilder.Entity("WEBAPI.Models.VocabularyCategory", b =>
                {
                    b.Navigation("VocabularyCategoryMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
