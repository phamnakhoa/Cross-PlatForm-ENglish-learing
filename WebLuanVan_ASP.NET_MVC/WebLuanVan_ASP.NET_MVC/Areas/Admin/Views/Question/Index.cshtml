@model IEnumerable<WebLuanVan_ASP.NET_MVC.Areas.Admin.Models.CQuestion>
@using WebLuanVan_ASP.NET_MVC.Areas.Admin.Models
@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
    var questionLevelTypes = ViewBag.QuestionLevels as List<CQuestionLevel>;
    var questionTypes = ViewBag.QuestionTypes as List<CQuestionType>;
    var contentTypes = ViewBag.ContentTypes as List<CContentType>;
    int? currentQuestionLevelTypeId = ViewBag.CurrentQuestionLevelId;
    int? currentQuestionTypeId = ViewBag.CurrentQuestionTypeId;
    int? currentContentTypeId = ViewBag.CurrentContentTypeId;
}   
@{
    Paginate paginate = new Paginate();
    // số trang sẽ mặc định là 0
    int pageNo = 0;
    if (ViewBag.Paginate != null)
    {
        paginate = ViewBag.Paginate;
        pageNo = paginate.CurrentPage;

    }
}
<link rel="stylesheet" href="~/AdminTL/assets/css/index.css">

<div class="content-header">
    <h1>Quản lý câu hỏi</h1>
</div>
<div class="card mb-4">
    <div class="card-header">
        <h5>Bộ lọc</h5>
    </div>

    <div class="card-body">
        <form method="get" class="row">
            <div class="col-md-3">
                <label class="form-label">Chủ đề</label>
                <select id="contentTypeSelect" name="contentTypeId" class="form-select select2">
                    <option value="">-- Tất cả loại --</option>
                    @foreach (var type in contentTypes)
                    {
                        <option value="@type.ContentTypeId" selected="@(currentContentTypeId == type.ContentTypeId)">
                            @type.TypeName
                        </option>
                    }
                </select>
                
            </div>
            <div class="col-md-3">
                <label class="form-label">Loại câu hỏi</label>
                <select id="questionTypeSelect" name="questionTypeId" class="form-select select2">
                    <option value="">-- Tất cả loại --</option>
                    @foreach (var type in questionTypes)
                    {
                        <option value="@type.QuestionTypeId" selected="@(currentQuestionTypeId == type.QuestionTypeId)">
                            @type.TypeName
                        </option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Cấp độ</label>
                <select id="questionLevelTypeSelect" name="questionLevelId" class="form-select select2">
                    <option value="">-- Tất cả loại --</option>
                    @foreach (var type in questionLevelTypes)
                    {
                        <option value="@type.QuestionLevelId" selected="@(currentQuestionLevelTypeId == type.QuestionLevelId)">
                            @type.QuestionName
                        </option>
                    }
                </select>
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <button type="submit" class="btn btn-primary">Lọc</button>
                @if ( currentQuestionTypeId.HasValue || currentContentTypeId.HasValue || currentQuestionLevelTypeId.HasValue)
                {
                    <a asp-area="Admin" asp-action="Index" asp-controller="Question" class="btn btn-outline-secondary ms-2">Xóa lọc</a>
                }
            </div>
        </form>
    </div>
</div>
<!-- Thêm form ẩn để submit -->
<a id="addToLessonLink" asp-action="SelectLessonForQuestions" style="display:none;"></a>

<div class="d-flex flex-wrap justify-content-between align-items-end mb-4">
    <div class="d-flex flex-wrap align-items-end gap-2">
        <div>
            <label class="form-label mb-1">Tải lên file Excel</label>
            <input type="file" id="excelFile" name="excelFile" class="form-control" accept=".xlsx, .xls" style="min-width:220px;" />
        </div>
        <button type="button" id="uploadExcel" class="btn btn-success ms-2 mb-1">
            <i class="fas fa-file-import me-1"></i>Import Excel
        </button>
    </div>
    <div class="d-flex flex-wrap align-items-end gap-2">
        <a asp-action="ExportDataToExcel" asp-area="Admin" asp-controller="Question" class="btn btn-primary mb-1">
            <i class="fas fa-file-export me-1"></i>Export Excel
        </a>
        <a asp-action="formThemQuestion" asp-area="Admin" asp-controller="Question" class="btn btn-primary mb-1">
            <i class="fas fa-plus me-1"></i>Thêm câu hỏi
        </a>
    </div>
</div>

<div class="d-flex justify-content-between align-items-center mt-4 mb-3">
    <h2>Danh sách câu hỏi</h2>
    <div>
        <button id="InsertLessonSelected" class="btn btn-primary mr-2" disabled>Thêm vào bài học</button>
        <button id="deleteSelected" class="btn btn-danger mr-2" disabled>Xóa đã chọn</button>
    </div>
</div>

<form id="deleteForm" asp-action="DeleteMultiple" method="post">
    <table class="table table-striped table-responsive">
        <thead>
            <tr>
                <th><input type="checkbox" id="selectAll" /></th>
                <th>Câu hỏi</th>
                <th>Loại câu hỏi</th>
                <th>Cấp độ</th>
                <th>Thao tác</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var question in Model)
            {
                <tr>
                    <td><input type="checkbox" name="selectedIds" value="@question.QuestionId" class="rowCheckbox" /></td>
                    <td>
                        <div>
                            @{
                                var maxLength = 50; // Hiển thị tối đa 200 ký tự
                                var questionText = question.QuestionText ?? "";
                                var isLong = questionText.Length > maxLength;
                                var displayText = isLong ? questionText.Substring(0, maxLength) + "..." : questionText;
                            }
                            @Html.Raw(displayText)
                            @if (isLong)
                            {
                                <a asp-action="viewDetail" asp-route-id="@question.QuestionId" class="btn btn-link btn-sm p-0 ms-2">Xem chi tiết</a>
                            }
                        </div>
                    </td>
                    <td>
                        @{
                            var typeName = questionTypes?.FirstOrDefault(t => t.QuestionTypeId == question.QuestionTypeId)?.TypeName ?? "N/A";
                        }
                        @typeName
                    </td>
                    <td>
                        @{
                            var typeLevelName = questionLevelTypes?.FirstOrDefault(t => t.QuestionLevelId == question.QuestionLevelId)?.QuestionName ?? "N/A";
                        }
                        @typeLevelName
                    </td>
                    <td>
                        <a asp-action="formSuaQuestion" asp-route-id="@question.QuestionId" class="btn btn-sm btn-warning">
                            <i class="fas fa-edit"></i>
                        </a>
                        <a asp-action="xoaQuestion" asp-route-id="@question.QuestionId" onclick="confirmDelete(event)" class="btn btn-sm btn-danger">
                            <i class="fas fa-trash"></i>
                        </a>
                        <a asp-action="viewDetail" asp-route-id="@question.QuestionId" class="btn btn-sm btn-primary">
                            <i class="fas fa-eye"></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</form>
<!--Phân trang-->
<!-- phải có _*.cshtml mới partial được-->
<partial name="_Paging" model="@paginate" />
@section Scripts {
    <script>
        $(document).ready(function() {
            // Khởi tạo Select2 cho dropdown bài học 
             // Nếu muốn dùng AJAX search dùng cho dự án lớn khi có các danh mục hay cấp độ lớn hơn 100 - 1000
              $('#contentTypeSelect').select2({
                ajax: {
                    url: '@Url.Action("SearchContentType", "Question")',
                    dataType: 'json',
                    delay: 250,
                    data: function(params) {
                        return {
                            searchTerm: params.term, // chuỗi tìm kiếm
                            page: params.page || 1 // phân trang mặc định là 1
                        };
                    },
                    processResults: function(data, params) {
                        params.page = params.page || 1;
                        return {
                            results: data.items,
                            pagination: {
                                more: (params.page * 10) < data.totalCount
                            }
                        };
                    },
                    cache: true
                }
            });
            $('#questionTypeSelect').select2({
                ajax: {
                    url: '@Url.Action("SearchQuestionType", "Question")',
                    dataType: 'json',
                    delay: 250,
                    data: function(params) {
                        return {
                            searchTerm: params.term, // chuỗi tìm kiếm
                            page: params.page || 1 // phân trang mặc định là 1
                        };
                    },
                    processResults: function(data, params) {
                        params.page = params.page || 1;
                        return {
                            results: data.items,
                            pagination: {
                                more: (params.page * 10) < data.totalCount
                            }
                        };
                    },
                    cache: true
                }
            });
             $('#questionLevelTypeSelect').select2({
                ajax: {
                    url: '@Url.Action("SearchQuestionLevel", "Question")',
                    dataType: 'json',
                    delay: 250,
                    data: function(params) {
                        return {
                            searchTerm: params.term, // chuỗi tìm kiếm
                            page: params.page || 1 // phân trang mặc định là 1
                        };
                    },
                    processResults: function(data, params) {
                        params.page = params.page || 1;
                        return {
                            results: data.items,
                            pagination: {
                                more: (params.page * 10) < data.totalCount
                            }
                        };
                    },
                    cache: true
                }
            });
            // Giữ nguyên các script xử lý checkbox và xóa nhiều
            $('#selectAll').change(function () {
                $('.rowCheckbox').prop('checked', $(this).prop('checked'));
                toggleDeleteButton();
            });

            $('.rowCheckbox').change(function () {
                if ($('.rowCheckbox:checked').length === $('.rowCheckbox').length) {
                    $('#selectAll').prop('checked', true);
                } else {
                    $('#selectAll').prop('checked', false);
                }
                toggleDeleteButton();
            });

            function toggleDeleteButton() {
                var checkedCount = $('.rowCheckbox:checked').length;
                $('#deleteSelected').prop('disabled', checkedCount === 0);
                $('#deleteSelected').text(checkedCount > 0 ? `Xóa (${checkedCount}) đã chọn` : 'Xóa đã chọn');
                $('#InsertLessonSelected').prop('disabled', checkedCount === 0);
                $('#InsertLessonSelected').text(checkedCount > 0 ? `Thêm (${checkedCount}) vào bài học` : 'Thêm vào bài học');
            }
            $('#deleteSelected').click(function (e) {
                e.preventDefault();
                confirmDeleteMultiple(e,function(){
                      var selectedIds = $('.rowCheckbox:checked').map(function () {
                        return $(this).val();
                    }).get();

                    $.ajax({
                        url: '@Url.Action("DeleteMultiple", "Question", new { area = "Admin" })',
                        type: 'POST',
                        data: { selectedIds: selectedIds },
                        success: function (response) {
                            if (response.success) {
                                location.reload();
                            } else {
                                alert('Xóa không thành công: ' + response.message);
                            }
                        },
                        error: function () {
                            alert('Đã xảy ra lỗi khi xóa.');
                        }
                    });
                })

            });
            $('#InsertLessonSelected').click(function (e) {
            e.preventDefault();
            var checkedCount = $('.rowCheckbox:checked').length;
            if (checkedCount === 0) return;

            // Lấy danh sách ID bài học đã chọn
            var selectedIds = $('.rowCheckbox:checked').map(function() {
                return $(this).val();
            }).get().join(',');

            
            $('#addToLessonLink')[0].href = $('#addToLessonLink')[0].href + '?questionIds=' + selectedIds;
            $('#addToLessonLink')[0].click();
        });
            $('#uploadExcel').click(function () {
                var fileInput = $('#excelFile')[0];
                if (fileInput.files.length === 0) {
                    alert('Vui lòng chọn file Excel!');
                    return;
                }

                var formData = new FormData();
                formData.append('excelFile', fileInput.files[0]);

                $.ajax({
                    url: '@Url.Action("UploadExcel", "Question", new { area = "Admin" })',
                    type: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response.success) {
                            alert('Import thành công: ' + response.message);
                            location.reload();
                        } else {
                            alert('Import thất bại: ' + response.message);
                        }
                    },
                    error: function () {
                        alert('Đã xảy ra lỗi khi upload file.');
                    }
                });
            });
        });
    </script>
}