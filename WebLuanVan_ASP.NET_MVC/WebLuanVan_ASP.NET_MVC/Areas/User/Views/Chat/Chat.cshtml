@model IEnumerable<WebLuanVan_ASP.NET_MVC.Areas.Admin.Models.CMessage>
@{
    var token = Context.Session.GetString("AuthToken");
    var currentUserId = ViewBag.UserId as int? ?? 0;
    var conversationId = ViewBag.ConversationId as int? ?? 0;
    var senderName = ViewBag.SenderName as string ?? "";
}
<style>
    .chat-container {
        background: #fff;
        border: none;
        border-radius: 18px;
        max-width: 100%;
        margin: 0;
        padding: 0;
        box-shadow: 0 8px 32px rgba(0,0,0,0.18), 0 1.5px 6px rgba(0,0,0,0.08);
        display: flex;
        flex-direction: column;
        height: 100%;
        min-height: 420px;
        overflow: hidden;
    }

    .chat-header {
        background: #0078d7;
        color: #fff;
        padding: 14px 20px;
        font-weight: bold;
        border-radius: 18px 18px 0 0;
        font-size: 18px;
        letter-spacing: 0.5px;
        position: sticky;
        top: 0;
        z-index: 2;
    }

    #chatMessages {
        flex: 1;
        min-height: 340px;
        max-height: 340px;
        overflow-y: auto;
        padding: 18px 14px 10px 14px;
        background: #f4f6fb;
        display: flex;
        flex-direction: column;
        gap: 12px;
        border-radius: 0 0 18px 18px;
        scroll-behavior: smooth;
    }

    .chat-bubble {
        max-width: 75%;
        padding: 12px 18px;
        border-radius: 18px;
        margin-bottom: 2px;
        position: relative;
        font-size: 15px;
        box-shadow: 0 1px 2px rgba(0,0,0,0.07);
        word-break: break-word;
        display: inline-block;
        transition: background 0.2s;
    }

        .chat-bubble.me {
            background: #d2f8d2;
            align-self: flex-end;
            margin-left: auto;
            color: #222;
        }

        .chat-bubble.other {
            background: #f1f1f1;
            align-self: flex-start;
            margin-right: auto;
            color: #222;
        }

    .chat-date {
        font-size: 12px;
        color: #888;
        margin-top: 4px;
        text-align: right;
    }

    .chat-input-row {
        display: flex;
        border-top: 1px solid #e0e0e0;
        padding: 10px 12px;
        background: #fff;
        border-radius: 0 0 18px 18px;
        gap: 8px;
        align-items: center;
    }

    #messageInput {
        flex: 1;
        border-radius: 8px;
        border: 1px solid #ccc;
        padding: 10px 12px;
        font-size: 15px;
        outline: none;
        transition: border 0.2s;
    }

        #messageInput:focus {
            border: 1.5px solid #0078d7;
        }

    .btn-send {
        background: #0078d7;
        color: #fff;
        border: none;
        border-radius: 8px;
        padding: 9px 20px;
        font-size: 15px;
        font-weight: 600;
        transition: background 0.2s;
        box-shadow: 0 1px 2px rgba(0,0,0,0.07);
    }

        .btn-send:hover {
            background: #005fa3;
        }
</style>

<div class="chat-container">
    <div class="chat-header">Chat</div>
    <div id="chatMessages">
        @foreach (var message in Model)
        {
            var isMe = message.SenderID == currentUserId;
            <div class="chat-bubble @(isMe ? "me" : "other")">
                @message.Content
                <div class="chat-date">
                    @message.SenderName, @message.SentAt.ToString("HH:mm dd/MM/yyyy")
                </div>
            </div>
        }
    </div>
    <div class="chat-input-row">
        <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." autocomplete="off" />
        <button onclick="sendMessage()" class="btn-send">Send</button>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
<script>
    // Use Razor to output JS values as literals
    const currentUserId = @(currentUserId);
    const conversationId = @(conversationId);
    const senderName = '@senderName';
    const token = '@(token?.Replace("'", "\\'"))';
    const apiBaseUrl = '@ViewBag.ApiBaseUrl';

    const connection = new signalR.HubConnectionBuilder()
        .withUrl(apiBaseUrl.replace('/api/', '/chatHub'), {
            accessTokenFactory: () => token
        })
        .build();

    connection.on("ReceiveMessage", (senderId, senderName, content, sentAt) => {
        appendMessage(senderId, senderName, content, sentAt);
    });

    connection.start().then(() => {
        connection.invoke("JoinConversation", conversationId);
    }).catch(err => console.error(err));

    window.onload = function () {
        var chatMessages = document.getElementById("chatMessages");
        chatMessages.scrollTop = chatMessages.scrollHeight;
    };

    function appendMessage(senderId, senderName, content, sentAt) {
        const chatMessages = document.getElementById("chatMessages");
        const bubble = document.createElement("div");
        bubble.className = "chat-bubble " + (senderId == currentUserId ? "me" : "other");
        bubble.innerHTML = `
            ${content}
            <div class="chat-date">${senderName}, ${formatDate(sentAt)}</div>
        `;
        chatMessages.appendChild(bubble);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function formatDate(dateString) {
        const d = new Date(dateString);
        return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) + " " +
            d.toLocaleDateString('vi-VN');
    }

    function sendMessage() {
        const message = document.getElementById("messageInput").value;
        if (message) {
            fetch('@Url.Action("SendMessage", "Chat")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    conversationId: conversationId,
                    senderId: currentUserId,
                    senderName: senderName,
                    content: message
                })
            }).then(response => {
                if (response.ok) {
                    const now = new Date().toISOString();
                    connection.invoke("SendMessage", conversationId, currentUserId, senderName, message, now);
                    document.getElementById("messageInput").value = '';
                }
            }).catch(err => console.error(err));
        }
    }
</script>
