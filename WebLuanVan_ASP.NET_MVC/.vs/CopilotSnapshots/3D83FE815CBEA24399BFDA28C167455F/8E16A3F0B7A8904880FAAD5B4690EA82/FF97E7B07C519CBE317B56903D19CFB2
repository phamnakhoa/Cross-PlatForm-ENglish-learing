using System.Net.Http.Headers;
using System.Text;
using Microsoft.CodeAnalysis;
using Newtonsoft.Json;
using NuGet.Common;
using OfficeOpenXml;
using OfficeOpenXml;
using ClosedXML.Excel;
using static WebLuanVan_ASP.NET_MVC.Config.ApiConfig;
using Microsoft.Extensions.Primitives;
using Google.Apis.Auth.OAuth2;
using Microsoft.Extensions.Configuration;
using Microsoft.AspNetCore.Mvc;
namespace WebLuanVan_ASP.NET_MVC.Areas.Admin.Models
{
    public class CXuLy
    {
        // Hard-code cấu hình FCM (có thể thay bằng cách đọc từ appsettings.json nếu cần)
        private static readonly string ServiceAccountKeyPath = "wwwroot/credentials/service-account-key.json";
        private static readonly string ProjectId = "testnotifications-66d15";

        // gửi thông báo cho các ứng dụng đã tải( dùng Firebase, cần FCM Token của từng máy )
        public static async Task<(bool Success, string Message)> SendFcmNotificationAsync(string fcmToken, string title, string body)
        {
            try
            {
                if (string.IsNullOrEmpty(ServiceAccountKeyPath) || string.IsNullOrEmpty(ProjectId))
                {
                    return (false, "FCM configuration is missing.");
                }

                var credential = GoogleCredential.FromFile(ServiceAccountKeyPath)
                    .CreateScoped("https://www.googleapis.com/auth/firebase.messaging");
                var accessToken = await credential.UnderlyingCredential.GetAccessTokenForRequestAsync();

                using (var client = new HttpClient())
                {
                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

                    var data = new
                    {
                        message = new
                        {
                            token = fcmToken,
                            notification = new
                            {
                                title = title,
                                body = body
                            }
                        }
                    };

                    var json = JsonConvert.SerializeObject(data);
                    var content = new StringContent(json, Encoding.UTF8, "application/json");

                    var response = await client.PostAsync(
                        $"https://fcm.googleapis.com/v1/projects/{ProjectId}/messages:send",
                        content);

                    var result = await response.Content.ReadAsStringAsync();

                    if (response.IsSuccessStatusCode)
                    {
                        Console.WriteLine($"FCM Notification sent successfully: {result}");
                        return (true, "Gửi thông báo thành công");
                    }
                    else
                    {
                        Console.WriteLine($"FCM Error: {response.StatusCode} - {result}");
                        return (false, $"Gửi thông báo thất bại: {response.StatusCode} - {result}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"FCM Exception: {ex.Message}");
                return (false, $"Lỗi khi gửi thông báo: {ex.Message}");
            }
        }
        // ImportExcel như cái tên
        public static (bool Success, string Message) ImportExcel(IFormFile excelFile, string token)
        {
            if (excelFile == null || excelFile.Length == 0)
            {
                return (false, "Vui lòng chọn file Excel!");
            }

            try
            {
                using (var stream = new MemoryStream())
                {
                    excelFile.CopyTo(stream);
                    using (var workbook = new ClosedXML.Excel.XLWorkbook(stream))
                    {
                        var worksheet = workbook.Worksheet(1); // Lấy sheet đầu tiên
                        var rowCount = worksheet.RowsUsed().Count();

                        var questions = new List<CQuestion>();
                        for (int row = 2; row <= rowCount; row++) // Bắt đầu từ row 2 (bỏ header)
                        {
                            string contentTypeIdStr = worksheet.Cell(row, 2).Value.ToString().Trim(); // Cột 2: contentTypeId
                            string questionTypeIdStr = worksheet.Cell(row, 4).Value.ToString().Trim(); // Cột 4: questionTypeId

                            if (!int.TryParse(contentTypeIdStr, out int contentTypeId))
                            {
                                return (false, $"Lỗi ở hàng {row}, cột contentTypeId: '{contentTypeIdStr}' không phải số.");
                            }
                            if (!int.TryParse(questionTypeIdStr, out int questionTypeId))
                            {
                                return (false, $"Lỗi ở hàng {row}, cột questionTypeId: '{questionTypeIdStr}' không phải số.");
                            }

                            var question = new CQuestion
                            {
                                ContentTypeId = contentTypeId, // Cột 2
                                QuestionText = worksheet.Cell(row, 3).Value.ToString(), // Cột 3
                                QuestionTypeId = questionTypeId, // Cột 4
                                AnswerOptions = worksheet.Cell(row, 5).Value.ToString(), // Cột 5
                                CorrectAnswer = worksheet.Cell(row, 6).Value.ToString(), // Cột 6
                                ImageUrl = worksheet.Cell(row, 7).Value.ToString(), // Cột 7
                                AudioUrl = worksheet.Cell(row, 8).Value.ToString(), // Cột 8
                                Explanation = worksheet.Cell(row, 9).Value.ToString() // Cột 9
                            };
                            questions.Add(question);
                        }

                        // Gọi API để insert multiple questions
                        string apiUrl = $"{api}QuanLyCauHoi/InsertMultipleQuestions";
                        HttpClient client = new HttpClient();
                        client.DefaultRequestHeaders.Authorization =
                            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                        var content = new StringContent(JsonConvert.SerializeObject(questions), Encoding.UTF8, "application/json");
                        var res = client.PostAsync(apiUrl, content);
                        res.Wait();

                        if (res.Result.IsSuccessStatusCode)
                        {
                            return (true, "Import thành công!");
                        }
                        else
                        {
                            var error = res.Result.Content.ReadAsStringAsync().Result;
                            return (false, "Lỗi: " + error);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return (false, "Lỗi khi xử lý file: " + ex.Message);
            }
        }

        // C# - CXuLy.cs (bổ sung vào class CXuLy)
        public static List<CVocabulary> GetListVocabulary(string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyVocabulary/GetListVocabulary";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<CVocabulary>>(strUrl);
                res.Wait();
                return res.Result ?? new List<CVocabulary>();
            }
            catch
            {
                return new List<CVocabulary>();
            }
        }
        // C# - CXuLy.cs (bổ sung vào class CXuLy)
        public static bool CreateVocabulary(CVocabulary vocab, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyVocabulary/CreateVocabulary";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var res = client.PostAsJsonAsync(strUrl, vocab);
                res.Wait();
                return res.Result.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        }

        public static bool UpdateVocabulary(CVocabulary vocab, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyVocabulary/Update{vocab.VocabularyId}";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, vocab);
                res.Wait();
                return res.Result.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        }

        public static bool DeleteVocabulary(int id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyVocabulary/Delete{id}";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                return res.Result.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        }


        public static CVocabulary GetVocabularyById(int id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyVocabulary/GetVocabularyById/{id}";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<CVocabulary>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }

        public static List<CVocabularyMeaning> GetMeaningsByVocabularyId(int vocabularyId, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyVocabulary/GetMeaningsByVocabularyId/{vocabularyId}";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<CVocabularyMeaning>>(strUrl);
                res.Wait();
                return res.Result ?? new List<CVocabularyMeaning>();
            }
            catch
            {
                return new List<CVocabularyMeaning>();
            }
        }

        public static List<CVocabularyCategory> GetListVocabularyCategory(string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyVocabulary/GetListVocabularyCategory";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<CVocabularyCategory>>(strUrl);
                res.Wait();
                return res.Result ?? new List<CVocabularyCategory>();
            }
            catch
            {
                return new List<CVocabularyCategory>();
            }
        }

        public static List<VocabularyCategoryMappingDTO> GetListVocabularyCategoryMapping(string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyVocabulary/GetListVocabularyCategoryMapping";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<VocabularyCategoryMappingDTO>>(strUrl);
                res.Wait();
                return res.Result ?? new List<VocabularyCategoryMappingDTO>();
            }
            catch
            {
                return new List<VocabularyCategoryMappingDTO>();
            }
        }

        public static bool deleteOrders(string orderId, string token)
        {
            try
            {
                string strUrl = $"{api}payment/DeleteOrders/" + orderId;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                return res.Result.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        }
        // Lấy review theo ID
        public static CReview GetReviewById(int reviewId, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyReview/GetById/{reviewId}";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<CReview>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }


        // Xóa review
        public static bool DeleteReview(int reviewId, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyReview/DeleteReview/{reviewId}";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                return res.Result.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        }

        // Sửa review
        public static bool UpdateReview(int reviewId, CReview review, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyReview/UpdateReview/{reviewId}";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, review);
                res.Wait();
                return res.Result.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        }

        // Thêm review mới (nếu cần)
        public static bool CreateReview(CReview review, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyReview/CreateReviewCourseID";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PostAsJsonAsync(strUrl, review);
                res.Wait();
                Console.WriteLine("URL: " + strUrl);
                Console.WriteLine("Payload: " + JsonConvert.SerializeObject(review));
                if (!res.Result.IsSuccessStatusCode)
                {
                    var error = res.Result.Content.ReadAsStringAsync().Result;
                    Console.WriteLine("API Error: " + error);
                }

                return res.Result.IsSuccessStatusCode;

            }
            catch
            {
                return false;
            }
        }

        public static List<CReview> getDSReview()
        {
            try
            {
                string strUrl = $"{api}QuanLyReview/GetDSReviewByCourse";
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<List<CReview>>(strUrl);
                res.Wait();
                var result = res.Result;
                if (result == null)
                {
                    Console.WriteLine("Deserialization returned null. Check CReview class structure.");
                }
                return result ?? new List<CReview>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in getDSReview: {ex.Message}");
                if (ex.InnerException != null)
                {
                    Console.WriteLine($"Inner Exception: {ex.InnerException.Message}");
                }
                return new List<CReview>(); // Return empty list instead of null to avoid ViewBag.Error
            }
        }
        public static List<CReview> getDSReport()
        {
            try
            {
                string strUrl = $"{api}QuanLyReview/GetDSReport";
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<List<CReview>>(strUrl);
                res.Wait();
                var result = res.Result;
                if (result == null)
                {
                    Console.WriteLine("Deserialization returned null. Check CReview class structure.");
                }
                return result?.Where(r => r.ReviewType == "2" || r.ReviewType == "3").ToList() ?? new List<CReview>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in getDSReport: {ex.Message}");
                if (ex.InnerException != null)
                {
                    Console.WriteLine($"Inner Exception: {ex.InnerException.Message}");
                }
                return new List<CReview>();
            }
        }

        public static bool CreateReport(CReview report, string token)
        {
            try
            {
                string strUrl = report.ReviewType == "2"
                    ? $"{api}QuanLyReview/CreateReportLesson"
                    : $"{api}QuanLyReview/CreateReportCourse";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);
                var res = client.PostAsJsonAsync(strUrl, report);
                res.Wait();
                Console.WriteLine("URL: " + strUrl);
                Console.WriteLine("Payload: " + JsonConvert.SerializeObject(report));
                if (!res.Result.IsSuccessStatusCode)
                {
                    var error = res.Result.Content.ReadAsStringAsync().Result;
                    Console.WriteLine("API Error: " + error);
                }
                return res.Result.IsSuccessStatusCode;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in CreateReport: {ex.Message}");
                return false;
            }
        }
        public static List<COrders> getDSOrders(string token)
        {
            try
            {
                string strUrl = $"{api}payment/GetListOrders";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<COrders>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<COrders> GetDSOrderByUserId(string token)
        {
            try
            {
                string strUrl = $"{api}payment/GetDSOrderByUserId";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<COrders>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<CPaymentMethod> getDSPaymentMethod(string token)
        {
            try
            {
                string strUrl = $"{api}payment/GetListPaymentMethods";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<CPaymentMethod>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static bool UpdateQuestionOrder(CLessonQuestion dto, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/UpdateQuestionOrder";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, dto);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    var errorContent = res.Result.Content.ReadAsStringAsync().Result;
                    Console.WriteLine($"Error Response: {errorContent}");
                    return false;
                }

            
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in UpdateQuestionOrder: {ex.Message}");
                return false;
            }
        }
        public static bool UpdateLessonOrder(CCourseLessons dto, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyBaiHoc/UpdateLessonOrder";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, dto);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    var errorContent = res.Result.Content.ReadAsStringAsync().Result;
                    Console.WriteLine($"Error Response: {errorContent}");
                    return false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in UpdateLessonOrder: {ex.Message}");
                return false;
            }
        }
        public static List<CAcademicResult> GetDSAcademicResult(string token)
        {

            try
            {
                string strUrl = $"{api}QuanLyKetQuaHoc/GetAcademicResults";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                   new AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<CAcademicResult>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        
        public static List<CAcademicResult> GetDSAcademicResultByUserId(string userId,string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKetQuaHoc/GetAcademicResults?userId=" + userId;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
              new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<CAcademicResult>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<CAcademicResult> GetDSAcademicResultByUserIdAndCourseId(string userId,string courseId,string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKetQuaHoc/GetAcademicResults?userId={userId}3&courseId={courseId}";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
              new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<CAcademicResult>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<CAcademicResult> GetAcademicResultByUserIdAndCourseIdAndLessonId(string userId, string courseId,string lessonId,string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKetQuaHoc/GetAcademicResults?userId={userId}3&courseId={courseId}&lessonId={lessonId}";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
              new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<CAcademicResult>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }


        public static List<CQuestionLevel> getDSQuestionLevel()
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/GetQuestionLevels";
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<List<CQuestionLevel>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }

        public static CQuestionLevel getQuestionLevelById(string id)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/GetQuestionLevelById/" + id;
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<CQuestionLevel>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static bool themQuestionLevel(CQuestionLevel x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/InsertQuestionLevel";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PostAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool suaQuestionLevel(string id, CQuestionLevel x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/UpdateQuestionLevel/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool xoaQuestionLevel(string id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/DeleteQuestionLevel/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }

        public static List<CCourse> getDSCourse()
        {
            try
            {
                // làm sao dùng api trong strUrl



                string strUrl = $"{api}QuanLyKhoaHoc/GetListCourse";
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<List<CCourse>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<CRole> getRole(string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhachHang/GetListRole";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<CRole>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        // Lấy Banner phần tử đầu tiên
        public static List<CBanner> getBanner()
        {
            try
            {
                string strUrl = $"{api}QuanLyBanner/GetListBanners";
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<List<CBanner>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<CContentType> getDSContentType()
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/GetListQuestionContent";
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<List<CContentType>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static CContentType getContentTypeById(string id)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/GetQuestionContentById/" + id;
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<CContentType>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static bool themContentType(CContentType x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/InsertQuestionContent";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PostAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool xoaContentType(string id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/DeleteQuestionContent/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool suaContentType(string id, CContentType x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/UpdateQuestionContent/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static List<CCategory> getDSCategory()
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/GetListCategories";
                HttpClient client = new HttpClient();

                var res = client.GetFromJsonAsync<List<CCategory>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<CLevel> getDSLevel()
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/GetListLevels";
                HttpClient client = new HttpClient();

                var res = client.GetFromJsonAsync<List<CLevel>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<CUsers> getDSUsers()
        {
            try
            {
                string strUrl = $"{api}QuanLyKhachHang/ListDanhSachTaiKhoan";
                HttpClient client = new HttpClient();

            
                var res = client.GetFromJsonAsync<List<CUsers>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<CLesson> getDSLesson()
        {
            try
            {
                string strUrl = $"{api}QuanLyBaiHoc/GetListLesson";
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<List<CLesson>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<CLessonQuestion> GetLessonQuestionByID(string id,string token)
        {

            try
            {
                string strUrl = $"{api}QuanLyCauHoi/GetLessonQuestionByID/" +id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                var res = client.GetFromJsonAsync<List<CLessonQuestion>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<CQuestion> getDSQuestion(string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/GetListQuestion";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<CQuestion>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }

        public static bool themLessonVaoKhoaHoc(int courseId, int lessonId, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyBaiHoc/AddLessonToCourse";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                var requestData = new CCourseLessons
                {
                    CourseId = courseId,
                    LessonId = lessonId,
                   
                };

                // Serialize manually to inspect JSON
                string jsonPayload = JsonConvert.SerializeObject(requestData);
                Console.WriteLine($"Request Payload: {jsonPayload}");

                var content = new StringContent(jsonPayload, System.Text.Encoding.UTF8, "application/json");
                var res = client.PostAsync(strUrl, content);
                res.Wait();

                if (!res.Result.IsSuccessStatusCode)
                {
                    var errorContent = res.Result.Content.ReadAsStringAsync().Result;
                    Console.WriteLine($"Error Response: {errorContent}");
                }

                return res.Result.IsSuccessStatusCode;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in themLessonVaoKhoaHoc: {ex.Message}");
                return false;
            }
        }
        public static bool xoaLessonRaKhoiKhoaHoc(string courseId, string lessonId, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyBaiHoc/RemoveLessonFromCourse/" + courseId + "/" + lessonId;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool themQuestionVaoBaiHoc(int lessonId, int questionId, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/AddQuestionToLesson";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                var requestData = new CLessonQuestion
                {
                    LessonId = lessonId,
                 
                    QuestionId = questionId,

                };

                // Serialize manually to inspect JSON
                string jsonPayload = JsonConvert.SerializeObject(requestData);
                Console.WriteLine($"Request Payload: {jsonPayload}");

                var content = new StringContent(jsonPayload, System.Text.Encoding.UTF8, "application/json");
                var res = client.PostAsync(strUrl, content);
                res.Wait();

                if (!res.Result.IsSuccessStatusCode)
                {
                    var errorContent = res.Result.Content.ReadAsStringAsync().Result;
                    Console.WriteLine($"Error Response: {errorContent}");
                }

                return res.Result.IsSuccessStatusCode;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in themQuestionVaoBaiHoc: {ex.Message}");
                return false;
            }

        }
        public static bool xoaQuestionRaKhoiBaiHoc(string lessonId, string questionId, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/RemoveQuestionFromLesson?lessonId=" + lessonId + "&questionId=" + questionId;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static List<CCourseLessons> GetCourseLessonByID(string id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyBaiHoc/GetCourseLessonByID/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<List<CCourseLessons>>(strUrl);
                res.Wait();
                Console.WriteLine($"GetCourseLessonByID Result: {JsonConvert.SerializeObject(res.Result)}");
                return res.Result ?? new List<CCourseLessons>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in GetCourseLessonByID: {ex.Message}");
                return new List<CCourseLessons>();
            }
        }
        public static bool SwapLessonOrder(CSwapLessonOrder dto, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyBaiHoc/SwapLessonOrder";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, dto);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in SwapLessonOrder: {ex.Message}");
                return false;
            }
        }
        public static bool SwapQuestionOrder(CSwapQuestionOrder dto, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/SwapQuestionOrder";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, dto);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in SwapQuestionOrder: {ex.Message}");
                return false;
            }
        }
        

        public static List<CQuestion> GetQuestionsByLessonId(string id)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/GetQuestionsByLessonId/" + id;
                HttpClient client = new HttpClient();

                var res = client.GetFromJsonAsync<List<CQuestion>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<CQuestionType> getDSQuestionType()
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/GetListQuestionType";
                HttpClient client = new HttpClient();

                var res = client.GetFromJsonAsync<List<CQuestionType>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<CUserPackage> getDSUserPackage( )
        {
            try
            {
                string strUrl = $"{api}QuanLyDangKyGoiCuoc/GetUserPackageRegistrations";
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<List<CUserPackage>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }
        public static List<CPackage> getDSPackage()
        {
            try
            {
                string strUrl = $"{api}QuanLyGoiCuoc/GetListPackages";
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<List<CPackage>>(strUrl);
                res.Wait();
                return res.Result;
            }
            catch
            {
                return null;
            }
        }

        public static bool xoaCourse(string id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/DeleteCourse/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
              new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool xoaRole(string id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhachHang/XoaRole/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool xoaUserPackage(int userId, int packageId, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyDangKyGoiCuoc/Delete/{userId}/{packageId}";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                return res.Result.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        }

        public static bool xoaUserByAdmin(string id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhachHang/XoaTaiKhoan/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
              new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool xoaCategory(string id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/DeleteCategories/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool xoaLevel(string id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/DeleteLevels/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool xoaQuestionType(string id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/DeleteQuestionType/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool xoaQuestion(string id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/DeleteQuestion/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool xoaLesson(string id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyBaiHoc/DeleteLesson/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool xoaPackage(string id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyGoiCuoc/DeletePackage/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.DeleteAsync(strUrl);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool themCourse(CCourse x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/InsertCourse";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PostAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool themUser(CUsers x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhachHang/ThemUser";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PostAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool themCategory(CCategory x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/InsertCategories";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                var res = client.PostAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool themLevel(CLevel x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/InsertLevels";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PostAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool themQuestionType(CQuestionType x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/InsertQuestionType";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PostAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool themQuestion(CQuestion x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/InsertQuestion";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PostAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool themLesson(CLesson x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyBaiHoc/InsertLesson";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PostAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool themPackage(CPackage x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyGoiCuoc/InsertPackage";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PostAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool themUserPackage(CUserPackage x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyDangKyGoiCuoc/Create";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PostAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }

        public static CCategory getCategoryById(string id)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/GetCategoryID?id=" + id;
                HttpClient client = new HttpClient();

                var res = client.GetFromJsonAsync<CCategory>(strUrl);
                res.Wait();
                if (res.Result != null)
                {
                    return res.Result;
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }
        }
        public static CUsers LayThongTinUser(string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhachHang/LayThongTinUser";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<CUsers>(strUrl);
                res.Wait();
                if (res.Result != null)
                {
                    return res.Result;
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }

        }
        public static CUsers getUserById(string id, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhachHang/LayThongTinUserBangID/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
               new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.GetFromJsonAsync<CUsers>(strUrl);
                res.Wait();
                if (res.Result != null)
                {
                    return res.Result;
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }
        }
        public static CCourse getCourseById(string id)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/GetCourseID?id=" + id;
                HttpClient client = new HttpClient();

                var res = client.GetFromJsonAsync<CCourse>(strUrl);
                res.Wait();
                if (res.Result != null)
                {
                    return res.Result;
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }
        }
        public static CLesson getLessonById(string id)
        {
            try
            {
                string strUrl = $"{api}QuanLyBaiHoc/GetLessonById/" + id;
                HttpClient client = new HttpClient();

                var res = client.GetFromJsonAsync<CLesson>(strUrl);
                res.Wait();
                if (res.Result != null)
                {
                    return res.Result;
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }


        }

        public static CLevel getLevelById(string id)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/GetLevelID/" + id;
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<CLevel>(strUrl);
                res.Wait();
                if (res.Result != null)
                {
                    return res.Result;
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }
        }
        public static CQuestionType getQuestionTypeById(string id)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/GetQuestionTypeById/" + id;
                HttpClient client = new HttpClient();

                var res = client.GetFromJsonAsync<CQuestionType>(strUrl);
                res.Wait();
                if (res.Result != null)
                {
                    return res.Result;
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }
        }
        public static CQuestion getQuestionById(string id)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/GetQuestionById/" + id;
                HttpClient client = new HttpClient();

                var res = client.GetFromJsonAsync<CQuestion>(strUrl);
                res.Wait();
                if (res.Result != null)
                {
                    return res.Result;
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }
        }
        public static CUserPackage GetPackageByUserIdAndByPackageId(string userId, string packageId)
        {
            try
            {
                string strUrl = $"{api}QuanLyDangKyGoiCuoc/GetPackageByUserIdAndByPackageId/" + userId + "/" + packageId;
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<CUserPackage>(strUrl);
                res.Wait();
                if (res.Result != null)
                {
                    return res.Result;
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }
        }
        public static List<CUserPackage> getPackagesByUserId(string id)
        {
            try
            {
                string strUrl = $"{api}QuanLyDangKyGoiCuoc/GetPackageByUser/" + id;
                HttpClient client = new HttpClient();
                var res = client.GetFromJsonAsync<List<CUserPackage>>(strUrl);
                res.Wait();
                if (res.Result != null)
                {
                    return res.Result;
                }
                else
                {
                    return null;

                }
            }
            catch
            {
                return null;
            }
        }
        public static CPackage getPackageById(string id)
        {
            try
            {
                string strUrl = $"{api}QuanLyGoiCuoc/GetPackageById/" + id;
                HttpClient client = new HttpClient();

                var res = client.GetFromJsonAsync<CPackage>(strUrl);
                res.Wait();
                if (res.Result != null)
                {
                    return res.Result;
                }
                else
                {
                    return null;
                }
            }
            catch
            {
                return null;
            }
        }
        public static bool editCourse(string id, CCourse x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/UpdateCourse/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);

                Console.WriteLine($"Sending to {strUrl}: {JsonConvert.SerializeObject(x)}");

                var res = client.PutAsJsonAsync(strUrl, x);
                res.Wait();

                if (!res.Result.IsSuccessStatusCode)
                {
                    var errorContent = res.Result.Content.ReadAsStringAsync().Result;
                    Console.WriteLine($"API Error: {res.Result.StatusCode} - {errorContent}");
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex}");
                return false;
            }
        }
        public static bool editRole(string id, CRole x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhachHang/SuaRole/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool editUserById(string id, CUsers x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhachHang/CapNhatThongTinUserTheoID/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);

                // Log the request payload for debugging
                Console.WriteLine($"Sending user update for ID {id}: {JsonConvert.SerializeObject(x)}");

                var res = client.PutAsJsonAsync(strUrl, x);
                res.Wait();

                if (!res.Result.IsSuccessStatusCode)
                {
                    // Read the error response for more details
                    var errorContent = res.Result.Content.ReadAsStringAsync().Result;
                    Console.WriteLine($"API Error: {res.Result.StatusCode} - {errorContent}");
                    return false;
                }

                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception in editUserById: {ex}");
                return false;
            }
        }

        public static bool editLesson(string id, CLesson x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyBaiHoc/UpdateLesson/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool editCategory(string id, CCategory x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/UpdateCategories/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool editLevel(string id, CLevel x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyKhoaHoc/UpdateLevels/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool editQuestionType(string id, CQuestionType x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/UpdateQuestionType/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool editQuestion(string id, CQuestion x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyCauHoi/UpdateQuestion/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }
        public static bool updateUserPackage(int userId, int packageId, CUserPackage x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyDangKyGoiCuoc/Update/{userId}/{packageId}";
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, x);
                res.Wait();
                return res.Result.IsSuccessStatusCode;
            }
            catch
            {
                return false;
            }
        }
        public static bool updatePackage(string id, CPackage x, string token)
        {
            try
            {
                string strUrl = $"{api}QuanLyGoiCuoc/UpdatePackage/" + id;
                HttpClient client = new HttpClient();
                client.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                var res = client.PutAsJsonAsync(strUrl, x);
                res.Wait();
                if (res.Result.IsSuccessStatusCode)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            catch
            {
                return false;
            }
        }



    }
}
